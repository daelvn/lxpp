-- ==== --
-- Lxpp - Map Typeclass
-- Complex table with extra functions and shorthands
class Map
  private _m = {}
  method _rules_ ()
    lxpp.addRule ( {
      condition = "[a-zA-Z_][a-zA-Z0-9_.]*#[kv?!]*",
      capture   = {
                    ["1"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#k>%s*([a-zA-Z_][a-zA-Z0-9_.]*),([a-zA-Z_][a-zA-Z0-9_.]*)",
                    ["2"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#v>%s*([a-zA-Z_][a-zA-Z0-9_.]*),([a-zA-Z_][a-zA-Z0-9_.]*)",
                    ["3"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#k%?%s*([a-zA-Z_][a-zA-Z0-9_.]*)",
                    ["4"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#v%?%s*([a-zA-Z_][a-zA-Z0-9_.]*)",
                    ["5"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#%!",
                    ["6"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#%?",
                    ["7"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#([a-zA-Z_][a-zA-Z0-9_.]*)%s*=(.-)[\n;]",
                    ["8"] = "([a-zA-Z_][a-zA-Z0-9_.]*)#([a-zA-Z_][a-zA-Z0-9_.]*)"
                  },
      replace   = {
                    ["1"] = "%1:movek ( %2, %3 )",
                    ["2"] = "%1:movev ( %2, %3 )",
                    ["3"] = "%1:findk ( %2 )",
                    ["4"] = "%1:findv ( %2 )",
                    ["5"] = "%1:clone ()",
                    ["6"] = "%1:length ()",
                    ["7"] = "%1:set ( %2, %3 )",
                    ["8"] = "%1:get ( %2 )"
                  },
      } )
  end
  -- Map#k
  method get (any k)
    return _m[&k]
  end
  -- Map#k = v
  method set (any k, any v)
    _m[&k] = v
    return true
  end
  -- Map#d!k / Map#k = nil
  method delete (any k)
    _m[&k] = nil
    return true
  end
  -- Map#?
  method length ()
    return #_m
  end
  -- Map#!
  method clone ()
    local clone = {}
    for k,v in ipairs(_m) do
      clone[k] = v
    end
    return clone
  end
  -- Map#k?k
  method findk (any k)
    return _m[&k]
  end
  -- Map#v?v
  method findv (any v)
    for k,va in pairs(_m) do
      if v == va then return k end
    end
    return false
  end
  -- Map#k>k,k
  method movek (any ki, any ke)
    _m[&ke] = _m[&ki]
    _m[&ki] = nil
  end
  -- Map#v>v,k
  method movev (any vi, any ke)
    _m[&ke] = _m[ self.findv (&vi) ]
    _m[&ke] = nil
  end
end
